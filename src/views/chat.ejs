<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Chat Application</title>
    <style>
        #chatContainer {
    display: flex;
    height: 500px;
    border: 1px solid #ccc;
    font-family: Arial, sans-serif;
}

#userList {
    width: 20%;
    border-right: 1px solid #ccc;
    padding: 10px;
    overflow-y: auto;
}

#chatBox {
    width: 60%;
    padding: 10px;
    overflow-y: auto;
}

.message {
    margin: 5px 0;
    padding: 5px;
    border-radius: 10px;
}

.sent {
    background-color: #e0f7fa;
    align-self: flex-end;
}

.received {
    background-color: #f0f4c3;
}

#messageInpu {
    width: 20%;
    display: flex;
    align-items: center;
    border-left: 1px solid #ccc;
}

#messageText {
    width: 80%;
    padding: 5px;
    border: none;
}

#sendButton {
    width: 20%;
    border: none;
    background-color: #4CAF50;
    color: white;
    cursor: pointer;
}

#sendButton:hover {
    background-color: #45a049;
}



    </style>
</head>
<body>
    <div id="chatContainer">

        <!-- Élément pour afficher le nom de l'utilisateur connecté -->
    <div id="usernameDisplay"></div>

    <!-- Conteneur pour la liste des utilisateurs -->
    <div id="userList">
        <h3>Utilisateurs en ligne:</h3>
        <!-- Les utilisateurs seront ajoutés ici par le script JavaScript -->
    </div>
        
        <div id="chatBox">
            <!-- Messages seront affichés ici -->
            <div id="messageList">Messages chargés ici...</div>
            <div class="message sent">Hello!</div>
            <div class="message received">Hi there!</div>
            <!-- Plus de messages -->
        </div>
        <div id="messageInpu">
            <form onsubmit="sendMessage(); return false;">
                <input type="text" id="messageInput" />
                <button id="sendButton" type="submit">Envoyer</button>
            </form>
            
            
        </div>
    </div>

    <script>
        function setupMessagePolling(token) {
    setInterval(() => {
        loadMessages(token);
    }, 3000); // Met à jour les messages toutes les 3 secondes
}
     document.addEventListener('DOMContentLoaded', () => {
    const username = localStorage.getItem('username');
    const userId = localStorage.getItem('userId');
    const token = localStorage.getItem('jwtToken');

    if (!userId || !token) {
        console.error('UserId ou token est null');
        // Redirigez vers la page de connexion si l'utilisateur n'est pas authentifié
        window.location.href = '/api/views/login';
        return;
    }
    loadUsers(token);
    loadMessages(token);
    setupMessagePolling(token); // Démarre le polling
    if (username) {
        document.getElementById('usernameDisplay').innerText = username;
    }

    
});

function loadUsers(token) {
    fetch('http://localhost:3000/api/users/getUsers', {
        method: 'GET',
        headers: {
            'Authorization': 'Bearer ' + token,
            'Content-Type': 'application/json'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Échec de la requête: ' + response.statusText);
        }
        return response.json();
    })
    .then(users => {
        const userListElement = document.getElementById('userList');
        userListElement.innerHTML = '';
        users.forEach(user => {
            const userElement = document.createElement('div');
            userElement.innerText = user.username;
            userListElement.appendChild(userElement);
        });
    })
    .catch(error => console.error('Erreur:', error));
}

function loadMessages(token) {
    fetch('http://localhost:3000/api/users/getMessages', {
        method: 'GET',
        headers: {
            'Authorization': 'Bearer ' + token
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Échec de la requête: ' + response.statusText);
        }
        return response.json();
    })
    .then(messages => {
        const messageList = document.getElementById('messageList');
        messageList.innerHTML = '';
        messages.forEach(message => {
            const messageElement = document.createElement('div');
            // Ajouter une classe CSS en fonction de l'expéditeur du message
            messageElement.classList.add('message');
            if (message.isCurrentUser) {
                messageElement.classList.add('sent');
            } else {
                messageElement.classList.add('received');
            }
            messageElement.textContent = `${message.sender.username}: ${message.content}`;
            messageList.appendChild(messageElement);
        });
    })
    .catch(error => console.error('Erreur:', error));
}

function sendMessage() {
    const messageContent = document.getElementById('messageInput').value;
    const token = localStorage.getItem('jwtToken');

    fetch('http://localhost:3000/api/users/sendMessage', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + token
        },
        body: JSON.stringify({ content: messageContent })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Échec de l\'envoi du message: ' + response.statusText);
        }
        return response.json();
    })
    .then(data => {
        console.log('Message envoyé:', data);
        document.getElementById('messageInput').value = '';
        loadMessages(token);
    })
    .catch(error => console.error('Erreur:', error));
}

    </script>
    
</body>
</html>
